# -*- coding: utf-8 -*-
"""Qianchi Huang CS146-Winter2022-PS1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pwjJ7FmXPwHtVqlsMXzTxDJd52VgsGx-
"""

import sys

# To add your own Drive Run this cell.
from google.colab import drive
drive.mount('/content/drive')
sys.path += ['/content/drive/My Drive/'] 


from nutil import *

# Use only the provided packages!
import math
import csv

from collections import Counter

from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import StratifiedShuffleSplit
from sklearn.model_selection import train_test_split

######################################################################
# Immutatble classes
######################################################################

class Classifier(object) :
    """
    Classifier interface.
    """

    def fit(self, X, y):
        raise NotImplementedError()

    def predict(self, X):
        raise NotImplementedError()


class MajorityVoteClassifier(Classifier) :

    def __init__(self) :
        """
        A classifier that always predicts the majority class.

        Attributes
        --------------------
            prediction_ -- majority class
        """
        self.prediction_ = None

    def fit(self, X, y) :
        """
        Build a majority vote classifier from the training set (X, y).

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            y    -- numpy array of shape (n,), target classes

        Returns
        --------------------
            self -- an instance of self
        """
        majority_val = Counter(y).most_common(1)[0][0]
        self.prediction_ = majority_val
        return self

    def predict(self, X) :
        """
        Predict class values.

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples

        Returns
        --------------------
            y    -- numpy array of shape (n,), predicted classes
        """
        if self.prediction_ is None :
            raise Exception("Classifier not initialized. Perform a fit first.")

        n,d = X.shape
        y = [self.prediction_] * n
        return y

######################################################################
# Mutatble classes
######################################################################

class RandomClassifier(Classifier) :

    def __init__(self) :
        """
        A classifier that predicts according to the distribution of the classes.

        Attributes
        --------------------
            probabilities_ -- class distribution dict (key = class, val = probability of class)
        """
        self.probabilities_ = None

    def fit(self, X, y) :
        """
        Build a random classifier from the training set (X, y).

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            y    -- numpy array of shape (n,), target classes

        Returns
        --------------------
            self -- an instance of self
        """

        # set self.probabilities_ according to the training set
        
        c = Counter(y)
        self.probabilities_ = {0:c[0]/len(y), 1:c[1]/len(y)}
        return self

    def predict(self, X, seed=1234) :
        """
        Predict class values.

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            seed -- integer, random seed

        Returns
        --------------------
            y    -- numpy array of shape (n,), predicted classes
        """
        if self.probabilities_ is None :
            raise Exception("Classifier not initialized. Perform a fit first.")
        np.random.seed(seed)
        n,d = X.shape
        y = np.random.choice([0, 1], (n,), p=[self.probabilities_[0], self.probabilities_[1]])
        return y

######################################################################
# Immutatble functions
######################################################################

def plot_histograms(X, y, Xnames, yname) :
    n,d = X.shape  # n = number of examples, d =  number of features
    fig = plt.figure(figsize=(20,15))
    ncol = 3
    nrow = d // ncol + 1
    for i in range(d) :
        fig.add_subplot (nrow,ncol,i+1)
        data, bins, align, labels = plot_histogram(X[:,i], y, Xname=Xnames[i], yname=yname, show = False)
        n, bins, patches = plt.hist(data, bins=bins, align=align, alpha=0.5, label=labels)
        plt.xlabel(Xnames[i])
        plt.ylabel('Frequency')
        plt.legend() #plt.legend(loc='upper left')

    plt.savefig ('histograms.pdf')


def plot_histogram(X, y, Xname, yname, show = True) :
    """
    Plots histogram of values in X grouped by y.

    Parameters
    --------------------
        X     -- numpy array of shape (n,d), feature values
        y     -- numpy array of shape (n,), target classes
        Xname -- string, name of feature
        yname -- string, name of target
    """

    # set up data for plotting
    targets = sorted(set(y))
    data = []; labels = []
    for target in targets :
        features = [X[i] for i in range(len(y)) if y[i] == target]
        data.append(features)
        labels.append('%s = %s' % (yname, target))

    # set up histogram bins
    features = set(X)
    nfeatures = len(features)
    test_range = list(range(int(math.floor(min(features))), int(math.ceil(max(features)))+1))
    if nfeatures < 10 and sorted(features) == test_range:
        bins = test_range + [test_range[-1] + 1] # add last bin
        align = 'left'
    else :
        bins = 10
        align = 'mid'

    # plot
    if show == True:
        plt.figure()
        n, bins, patches = plt.hist(data, bins=bins, align=align, alpha=0.5, label=labels)
        plt.xlabel(Xname)
        plt.ylabel('Frequency')
        plt.legend() #plt.legend(loc='upper left')
        plt.show()

    return data, bins, align, labels

######################################################################
# Mutatble functions
######################################################################

def error(clf, X, y, ntrials=100, test_size=0.2) :
    """
    Computes the classifier error over a random split of the data,
    averaged over ntrials runs.

    Parameters
    --------------------
        clf         -- classifier
        X           -- numpy array of shape (n,d), features values
        y           -- numpy array of shape (n,), target classes
        ntrials     -- integer, number of trials

    Returns
    --------------------
        train_error -- float, training error
        test_error  -- float, test error
        f1_score    -- float, test "micro" averaged f1 score
    """

    # compute cross-validation error using StratifiedShuffleSplit over ntrials

    s = StratifiedShuffleSplit(n_splits=ntrials, test_size=test_size, random_state=0)
    train_error = 0
    test_error = 0
    f1 = 0
    for train, test in s.split(X,y):
     clf.fit(X[train], y[train])
     y_pred_train = clf.predict(X[train])
     y_pred_test = clf.predict(X[test])
     y_train_pred = clf.predict(X[train])
     y_test_pred = clf.predict(X[test])
    # get the testing error and add to accumulators
     test_error += 1 - metrics.accuracy_score(y[test], y_pred_test, normalize = True)
     train_error += 1 - metrics.accuracy_score(y[train], y_pred_train, normalize = True)
     f1 += metrics.f1_score(y[test], y_pred_test, average = "micro")
    # set up return values
    train_error = train_error / ntrials
    test_error = test_error / ntrials
    f1_score = f1 / ntrials
    return train_error, test_error, f1_score

######################################################################
# Immutatble functions
######################################################################


def write_predictions(y_pred, filename, yname=None) :
    """Write out predictions to csv file."""
    out = open(filename, 'wb')
    f = csv.writer(out)
    if yname :
        f.writerow([yname])
    f.writerows(list(zip(y_pred)))
    out.close()

######################################################################
# main
######################################################################

def main():

    data_file =  "/content/drive/My Drive/adult_subsample.csv"

    



    data = load_data(data_file, header=1, predict_col=-1)

    X = data.X; Xnames = data.Xnames
    y = data.y; yname = data.yname
    n,d = X.shape  # n = number of examples, d =  number of features

    

    plt.figure()

    # plot histograms of each feature
    print('Plotting...')
    plot_histograms (X, y, Xnames=Xnames, yname=yname)
    


    # Preprocess X (e.g., normalize)
    scaler = StandardScaler()
    X = scaler.fit_transform(X)
    # train Majority Vote classifier on data
    print('Classifying using Majority Vote...')
    clf = MajorityVoteClassifier() # create MajorityVote classifier, which includes all model parameters
    clf.fit(X, y)                  # fit training data using the classifier
    y_pred = clf.predict(X)        # take the classifier and run it on the training data
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)


    # evaluate training error of Random classifier
    print('Classifying using Random...')
    classif = RandomClassifier()
    classif.fit(X, y)
    y_pred = classif.predict(X)        # take the classifier and run it on the training data
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)


    # evaluate training error of Decision Tree classifier
    print('Classifying using Decision Tree...')
    clf_tree = DecisionTreeClassifier(criterion="entropy")
    clf_tree.fit(X, y)
    y_pred = clf_tree.predict(X)        # take the classifier and run it on the training data
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)

    # evaluate training error of k-Nearest Neighbors classifier
    # use k = 3, 5, 7 for n_neighbors
    print('Classifying using k-Nearest Neighbors...')
    clf_nbr3 = KNeighborsClassifier(n_neighbors=3)
    clf_nbr3.fit(X, y)
    y_pred3 = clf_nbr3.predict(X)        # take the classifier and run it on the training data
    train_error3 = 1 - metrics.accuracy_score(y, y_pred3, normalize=True)
    print('\t-- training error for 3 neighbors: %.3f' % train_error3)

    clf_nbr5 = KNeighborsClassifier(n_neighbors=5)
    clf_nbr5.fit(X, y)
    y_pred5 = clf_nbr5.predict(X)        # take the classifier and run it on the training data
    train_error5 = 1 - metrics.accuracy_score(y, y_pred5, normalize=True)
    print('\t-- training error for 5 neighbors: %.3f' % train_error5)

    clf_nbr7 = KNeighborsClassifier(n_neighbors=7)
    clf_nbr7.fit(X, y)
    y_pred7 = clf_nbr7.predict(X)        # take the classifier and run it on the training data
    train_error7 = 1 - metrics.accuracy_score(y, y_pred7, normalize=True)
    print('\t-- training error for 7 neighbors: %.3f' % train_error7)


    # use cross-validation to compute average training and test error of classifiers
    print('Investigating various classifiers...')
    print('Investigating majorityvote classifiers...')
    train_error, test_error, F1_score = error(clf, X, y)
    print('\t-- training error: %.3f' % train_error)
    print('\t-- test error : %.3f' % test_error)
    print('\t-- F1 score : %.3f' % F1_score)
    
    print('Investigating random classifiers...')
    train_error, test_error, F1_score = error(classif, X, y)
    print('\t-- training error : %.3f' % train_error)
    print('\t-- test error : %.3f' % test_error)
    print('\t-- F1 score : %.3f' % F1_score)

    print('Investigating decision tree classifiers...')
    train_error, test_error, F1_score = error(clf_tree, X, y)
    print('\t-- training error : %.3f' % train_error)
    print('\t-- test error : %.3f' % test_error)
    print('\t-- F1 score : %.3f' % F1_score)

    print('Investigating k (k=5) neighbors classifiers...')
    train_error, test_error, F1_score = error(clf_nbr5, X, y)
    print('\t-- training error : %.3f' % train_error)
    print('\t-- test error : %.3f' % test_error)
    print('\t-- F1 score : %.3f' % F1_score)


    # use 10-fold cross-validation to find the best value of k for k-Nearest Neighbors classifier
    print('Finding the best k...')
    k = list(range(1, 50, 2))
    valError = []
    for i in k:
      clf_nbrk = KNeighborsClassifier(n_neighbors = i)
      errorK = 1 - cross_val_score(clf_nbrk, X, y, cv = 10).mean()
      valError.append(errorK)

    plt.figure(figsize=(8,6))
    plt.plot(k, valError, label = "Validation Error vs. Number of Neighbors")
    plt.xlabel("Number of Neighbors")
    plt.ylabel("Cross Validation Error")
    plt.show()

    # investigate decision tree classifier with various depths
    print('Investigating depths...')
    depth = list(range(1,21))
    maxDepth = []
    training_error = []
    testing_error= []
    for j in depth:
      clf_treed = DecisionTreeClassifier(criterion = "entropy", max_depth= j)
      train_error, test_error,f1_score = error(clf_treed,X,y)
      training_error.append(train_error)
      testing_error.append(test_error)
      maxDepth.append(j)

    fig = plt.figure().add_subplot()
    fig.plot(maxDepth, training_error, label = "Training Error", color = "green")
    fig.plot(maxDepth, testing_error,  label = "Test Error",  color = "red")
    plt.xlabel("Depth limit")
    plt.ylabel("Validation Error")
    plt.legend()
    plt.show()

    # investigate decision tree and k-Nearest Neighbors classifier with various training set sizes

    def experience_error(clf, X_train, y_train, X_test, y_test, train_prop, n_trials = 10):
      train_error = 0
      test_error = 0
      for l in range(n_trials):
          if train_prop == 1:
              clf.fit(X_train, y_train)
              y_pred_train = clf.predict(X_train)
              train_error += 1 - metrics.accuracy_score(y_train, y_pred_train, normalize=True)
              y_pred_test = clf.predict(X_test)
              test_error += 1 - metrics.accuracy_score(y_test, y_pred_test, normalize=True)
          else:
              X_train_s, X_test_s, y_train_s, y_test_s = train_test_split(X_train, y_train, test_size=1-train_prop, random_state=42)
              clf.fit(X_train_s, y_train_s)
              y_pred_train = clf.predict(X_train_s)
              train_error += 1 - metrics.accuracy_score(y_train_s, y_pred_train, normalize=True)
              y_pred_test = clf.predict(X_test)
              test_error += 1 - metrics.accuracy_score(y_test, y_pred_test, normalize=True)
      
      train_error /= n_trials
      test_error /= n_trials

      return train_error, test_error

    # first generate a random 90/10 split of the training data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)
    testing_proprotion=list(range(1,11))
    dt_train_errors = []
    dt_test_errors = []
    knn_train_errors = []
    knn_test_errors = []
    # collect training errors and test errors for dc and knn
    for t in testing_proprotion:
        dt_clf = DecisionTreeClassifier(criterion='entropy', max_depth=5)
        dt_train_error, dt_test_error = experience_error(dt_clf,X_train, y_train, X_test, y_test, train_prop = t*0.1)
        dt_train_errors.append(dt_train_error)
        dt_test_errors.append(dt_test_error)
        knn_clf = KNeighborsClassifier(n_neighbors=27)
        knn_train_error, knn_test_error = experience_error(knn_clf,X_train, y_train, X_test, y_test, train_prop = t*0.1)
        knn_train_errors.append(knn_train_error)
        knn_test_errors.append(knn_test_error)
   
    amount_of_training = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]
    # plot the graph
    plt.figure()
    plt.plot(amount_of_training, dt_train_errors, label='tree train error')
    plt.plot(amount_of_training, dt_test_errors, label='tree test error')
    plt.plot(amount_of_training, knn_train_errors, label='knn train error')
    plt.plot(amount_of_training, knn_test_errors, label='knn test error')
    plt.xlabel('Training Amount')
    plt.ylabel('Validation Error')
    plt.legend()
    plt.show()



    print('Done')


if __name__ == "__main__":
    main()
